# -*- coding: utf-8 -*-
"""HPCSon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eQVTuUaEtECTUWKJL4sJm748xH8x7cjw
"""

import numba
from numba import cuda
cuda.detect()

cuda.select_device(0)

cuda.close()
cuda.gpus

#Device name
cuda.close()
con_ = cuda.get_current_device()
cuda.gpus.current

#Get memory size
cuda.select_device(0)
con_ = cuda.current_context()
con_.get_memory_info()

from numba.cuda.cudadrv import enums
from numba import cuda
import numpy as np
device = cuda.get_current_device()
attribs= [name.replace("CU_DEVICE_ATTRIBUTE_", "") for name in dir(enums) if name.startswith("CU_DEVICE_ATTRIBUTE_")]
print(np.array(attribs))
atrr_s = ['MULTIPROCESSOR_COUNT', 'TOTAL_CONSTANT_MEMORY', 'MAX_SHARED_MEMORY_PER_MULTIPROCESSOR']
for attr in attribs:
  if attr in atrr_s:
    print(attr, '=', getattr(device, attr))

cc_cores_per_SM_dict = {
    (2,0) : 32,
    (2,1) : 48,
    (3,0) : 192,
    (3,5) : 192,
    (3,7) : 192,
    (5,0) : 128,
    (5,2) : 128,
    (6,0) : 64,
    (6,1) : 128,
    (7,0) : 64,
    (7,5) : 64,
    (8,0) : 64,
    (8,6) : 128,
    (8,9) : 128,
    (9,0) : 128
    }

device = cuda.get_current_device()
my_sms = getattr(device, 'MULTIPROCESSOR_COUNT')
my_cc = device.compute_capability
# What is compute capability?
# https://cvw.cac.cornell.edu/GPUarch/computecap
"""
Understanding GPU Architecture: Compute Capability
The technical properties of the SMs in a particular NVIDIA GPU 
are represented collectively by a version number called the 
compute capability of the device. This serves as a reference 
to the set of features that is supported by the GPU. It can even 
be discovered by applications at run time to find out whether 
certain hardware properties and/or instructions are present on the GPU.

Devices with the same first number in their compute capability 
share the same core architecture. For example, if a device's 
compute capability starts with a 7, it means that the GPU is 
based on the Volta architecture; 8 means the Ampere architecture; 
and so on. Minor version numbers correspond to incremental improvements 
to the base architecture. For instance, Turing is assigned a compute 
capability of 7.5 because it is an incremental update of the Volta architecture.

Are you thinking about writing CUDA programs for the NVIDIA graphics card 
in your personal computer? First, make sure this is a real possibility by 
searching through the lists of GPUs that are enabled for CUDA. If your card is 
listed, then note its compute capability, because this number lets you learn all 
kinds of things about the features and technical specifications of your GPU (much 
more than a beginner needs to know).

"""
cores_per_sm = cc_cores_per_SM_dict.get(my_cc)
total_cores = cores_per_sm*my_sms
print("GPU compute capability: " , my_cc)
print("GPU total number of SMs: " , my_sms)
print("total cores: " , total_cores)