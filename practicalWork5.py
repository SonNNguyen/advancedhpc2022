# -*- coding: utf-8 -*-
"""LabWork5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i1hoXqTuTjeShWB42LP3HApbLJ02D_mb
"""

import numba
from numba import cuda
import cv2
import matplotlib
import numpy as np
import time
import matplotlib.pyplot as plt

from matplotlib import image as img
from matplotlib import pyplot as plt
import numpy as np

image = np.array(img.imread("test.jpg"))
plt.imshow (image, cmap='gray', vmin=0, vmax=255)
image_padd = np.zeros((image.shape[0] + 2, image.shape[1] + 2, 3))
image_padd[1:-1, 1:-1] = image
##image_padded = np.pad(image, 1, mode= 'constant')
print(image_padd.shape)

array = np.ones((3,3))
averaging_filter = np.multiply(array, 1/9)
gauConv = [
[0, 0, 1, 2, 1, 0, 0],
[0, 3, 13, 22, 13, 3, 0],
[1, 13, 59, 97, 59, 13, 1],
[2, 22, 97, 159, 97, 22, 2],
[1, 13, 59, 97, 59, 13, 1],
[0, 3, 13, 22, 13, 3, 0],
[0, 0, 1, 2, 1, 0, 0]
]

def convolve(image, av_filter):

    # Flip the averaging filter
    # av_filter = np.flipud(np.fliplr(av_filter))
    filter_arr = np.array(gauConv)
    filter_arr = filter_arr/255
    print(filter_arr)
    # filter_arr = np.flipud(np.fliplr(filter_arr))
    print(filter_arr.shape)
    # av_filter = np.dstack([filter_arr]*3)
    av_filter = filter_arr
    image_padd = np.zeros((image.shape[0] + 6, image.shape[1] + 6, 3))
    image_padd[3:-3, 3:-3] = image
    print(image_padd.shape)
    # convolution output
    output = np.zeros_like(image_padd)
    
    # Loop over every pixel of the image
    for i in range(image.shape[1]):
        for j in range(image.shape[0]):
            # element-wise multiplication of the kernel and the image
            output[j, i,0]=int((av_filter * image_padd[j: j+7, i: i+7, 0]).sum()/3)
            output[j, i,1]=int((av_filter * image_padd[j: j+7, i: i+7, 1]).sum()/3)
            output[j, i,2]=int((av_filter * image_padd[j: j+7, i: i+7, 2]).sum()/3)

    return output

image = np.array(img.imread("test.jpg"))
image2 = convolve(image,gauConv)

import cv2
cv2.imwrite('out.jpg', image2)
img_out =cv2.imread('out.jpg')

fig = plt.figure()
ax1 = fig.add_subplot(1,2,2)
ax1.imshow(image)
ax2 = fig.add_subplot(1,2,1)
ax2.imshow(img_out)

print(img_out.shape)
print(img_out[:10][:10])