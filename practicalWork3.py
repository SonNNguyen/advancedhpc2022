# -*- coding: utf-8 -*-
"""LabWork3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zJs8Nv3H4SBIl4zD1FHx-6YqhNnYCHvB
"""

# import os
# os.environ["NUMBA_ENABLE_CUDASIM"] = "0" 
# os.environ["NUMBA_CUDA_DEBUGINFO"] = "0"
import numba
from numba import cuda
import cv2
import matplotlib
import numpy as np
import time

img = matplotlib.image.imread('test.jpg')
# img = img[::5, ::5]
image = (img[:, :, :3] ).astype('uint8')


imageWidth = image.shape[1]
imageHeight= image.shape[0]
image = image.reshape(imageWidth*imageHeight,3)
print(image.shape)
pixelCount = imageWidth * imageHeight
blockSize = 64
gridSize = int(pixelCount / blockSize)




start = time.time()
devData = cuda.to_device(image)

devOutput = cuda.device_array(
                            (imageHeight*imageWidth, 3),
                            np.uint8)



@cuda.jit
def grayscale(src, dst):
  tidx = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
  g = np.uint8((src[tidx, 0] + src[tidx, 1] + src[tidx, 2]) / 3)
  dst[tidx, 0] = dst[tidx, 1] = dst[tidx, 2] = g

import matplotlib.pyplot as plt


gpu_start = time.time()
grayscale[gridSize, blockSize](devData, devOutput)
gpu_end = time.time()
print(devOutput[800000][1])
hostOutput = devOutput.copy_to_host()



hostOutput = hostOutput.reshape((imageHeight, imageWidth,3)).astype('uint8')
end = time.time()


print("Processing time: ", end - start)
print("GPU Processing time: ", gpu_end - gpu_start)
imgplot = plt.imshow(hostOutput)
plt.show()

# https://stackoverflow.com/questions/43366740/a-cuda-error-when-a-large-array-is-used-as-input-data

# a vectorized numpy version of your implementation
def gray(src,dst):
    for i in range(src.shape[0]):
      # g = np.uint8(src[i][0]*0.33 + src[i][1]*0.33 + src[i][2]*0.33)
      g = np.uint8((src[i][0] + src[i][1] + src[i][2])/3)
      # print('g ', g)
      dst[i][0] = dst[i][1] = dst[i][2] = g

# image[:,:,0]*0.21+image[:,:,1]*0.72 + image[:,:,2]*0.07

img = matplotlib.image.imread('test.jpg')
print(img.shape)
image = img.reshape(imageWidth*imageHeight,3)

import matplotlib.pyplot as plt

start = time.time()
out = np.zeros((imageHeight*imageWidth, 3),np.uint8)  # This make the sum doesn't work. zeros by default use float  

gray(image,out)

out = out.reshape((imageHeight,imageWidth, 3))

end = time.time()
print("Processing time CPU: ", end - start)
print(out.shape)
imgplot = plt.imshow(out)
plt.show()

# a vectorized numpy version of your implementation
def grayQuick(image: np.array) -> np.array:
    return np.tile(
        np.expand_dims(
            (image[:,:,0]*0.21+image[:,:,1]*0.72 + image[:,:,2]*0.07), -1
        ),
        (1,1, 3)
    )


img = matplotlib.image.imread('test.jpg')


import matplotlib.pyplot as plt

start = time.time()
out = grayQuick(img)
out = out.reshape((imageHeight, imageWidth,3)).astype('int')

end = time.time()
print("Processing time CPU (Numpy): ", end - start)

imgplot = plt.imshow(out)
plt.show()